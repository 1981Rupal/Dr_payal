version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: hospital_crm_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: hospital_crm
      POSTGRES_USER: hospital_user
      POSTGRES_PASSWORD: hospital_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - hospital_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospital_user -d hospital_crm"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hospital_crm_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hospital_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hospital_crm_app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://hospital_user:hospital_password_2024@db:5432/hospital_crm
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      
      # Flask
      FLASK_ENV: production
      SECRET_KEY: your-super-secret-key-change-in-production-2024
      
      # Twilio (WhatsApp)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_WHATSAPP_NUMBER: ${TWILIO_WHATSAPP_NUMBER}
      
      # OpenAI (Chatbot)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Email
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      
      # File uploads
      UPLOAD_FOLDER: /app/uploads
      MAX_CONTENT_LENGTH: 16777216  # 16MB
      
      # Security
      SESSION_COOKIE_SECURE: "true"
      SESSION_COOKIE_HTTPONLY: "true"
      SESSION_COOKIE_SAMESITE: "Lax"
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hospital_crm_celery
    restart: unless-stopped
    command: celery -A app_enhanced.celery worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql://hospital_user:hospital_password_2024@db:5432/hospital_crm
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      SECRET_KEY: your-super-secret-key-change-in-production-2024
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_WHATSAPP_NUMBER: ${TWILIO_WHATSAPP_NUMBER}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital_network

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hospital_crm_beat
    restart: unless-stopped
    command: celery -A app_enhanced.celery beat --loglevel=info --schedule=/app/celerybeat-schedule
    environment:
      DATABASE_URL: postgresql://hospital_user:hospital_password_2024@db:5432/hospital_crm
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      SECRET_KEY: your-super-secret-key-change-in-production-2024
    volumes:
      - app_logs:/app/logs
      - celery_beat_data:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hospital_crm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - hospital_network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hospital_crm_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hospital_network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hospital_crm_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_password_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hospital_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hospital_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
